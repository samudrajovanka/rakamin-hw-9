openapi: 3.0.3
info:
  title: week 9
  version: 1.0.0
servers:
  - url: http://localhost:5000
tags:
  - name: auth
  - name: movies
  - name: users

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    ParameterMovieId:
      name: id
      in: path
      description: Movie ID
      required: true
      schema:
        type: integer
    PaginationPage:
      name: page
      in: query
      schema:
        type: integer
      description: default 1
      example: 1
    PaginationLimit:
      name: limit
      in: query
      schema:
        type: integer
      description: default 10
      example: 10
  schemas:
    BadRequest:
      type: object
      example: {
        "success": false,
        "message": "error message",
        "type": "ERROR_TYPE"
      }
    NotFound:
      type: object
      example: {
        "success": false,
        "message": "error message",
        "type": "NOT_FOUND_ERR"
      }
    ConflictEmail:
      type: object
      example: {
        "success": false,
        "message": "Email already used",
        "type": "CONFLICT_ERR"
      }
    Forbidden:
      type: object
      example: {
        "success": false,
        "message": "Email or password is wrong",
        "type": "AUTHENTICATION_ERR"
      }
    Unauthorized:
      type: object
      example: {
        "success": false,
        "message": "You are not authorized",
        "type": "AUTHORIZATION_ERR"
      }
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Unauthorized'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Forbidden'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConflictEmail'
      

paths:
  /api/auth/register:
    post:
      tags:
        - auth
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {
                "email": "string",
                "password": "string",
                "confirmPassword": "string",
                "gender": "Male",
                "role": "string"
              }

      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                example: {
                  "success": true,
                  "message": "User created successfully",
                  "data": {
                    "user": {
                        "id": 1,
                        "email": "test@gmail.com",
                        "gender": "Male",
                        "role": "Engineer"
                    }
                  }
                }
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409'

  /api/auth/login:
    post:
      tags:
        - auth
      summary: Login user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {
                "email": "string",
                "password": "string"
              }

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example: {
                  "success": true,
                  "message": "Login success",
                  "data": {
                    "accessToken": "Bearer token"
                  }
                }
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'

  /api/movies:
    post:
      tags:
        - movies
      summary: Create movie
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {
                "title": "One Piece",
                "genres": ["anime"],
                "year": "1997"
              }
              
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example: {
                  "success": true,
                  "message": "Create movie success",
                  "data": {
                    "movie": {
                      "id": 53581,
                      "title": "One Piece",
                      "genres": "anime",
                      "year": "1997"
                    }
                  }
                }
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    get:
      tags:
        - movies
      summary: Get all movies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationLimit'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example: {
                  "success": true,
                  "message": "Get movies success",
                  "data": {
                    "pagination": {
                      "totalPage": 11,
                      "totalData": 101,
                      "nextPage": 2,
                      "prevPage": null,
                      "currentPage": 1,
                      "limit": 10
                    },
                    "movies": [
                      {
                        "id": 21,
                        "title": "To Be or Not to Be",
                        "genres": [
                            "Comedy",
                            "Drama",
                            "War"
                        ],
                        "year": "2011"
                      }
                    ]
                  }
                }
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /api/movies/{id}:
    get:
      tags:
        - movies
      summary: Get movie
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ParameterMovieId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example: {
                  "success": true,
                  "message": "Get movie success",
                  "data": {
                    "movie": [
                      {
                        "id": 21,
                        "title": "To Be or Not to Be",
                        "genres": [
                            "Comedy",
                            "Drama",
                            "War"
                        ],
                        "year": "2011"
                      }
                    ]
                  }
                }
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - movies
      summary: Update movie
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ParameterMovieId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {
                "title": "One Piece",
                "genres": ["anime"],
                "year": "1997"
              }
              
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example: {
                  "success": true,
                  "message": "Update movie success",
                  "data": {
                    "movie": {
                      "id": 53581,
                      "title": "One Piece",
                      "genres": "anime",
                      "year": "1997"
                    }
                  }
                }
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - movies
      summary: Delete movie
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ParameterMovieId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example: {
                  "success": true,
                  "message": "Delete movie success"
                }
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /api/users:
    get:
      tags:
        - users
      summary: Get all users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationLimit'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {
              schema: {
                type: object,
                example: {
                  "success": true,
                  "message": "Get users success",
                  "data": {
                    "pagination": {
                      "totalPage": 11,
                      "totalData": 101,
                      "nextPage": 2,
                      "prevPage": null,
                      "currentPage": 1,
                      "limit": 10
                    },
                    "users": [
                      {
                        "id": 1,
                        "email": "oainger0@craigslist.org",
                        "gender": "Female",
                        "role": "Construction Worker"
                      },
                    ]
                  }
                }
              }
            }
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /api/users/me:
    get:
      tags:
        - users
      summary: Get your user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {
              schema: {
                type: object,
                example: {
                  "success": true,
                  "message": "Get user success",
                  "data": {
                    "user": {
                      "id": 1,
                      "email": "oainger0@craigslist.org",
                      "gender": "Female",
                      "role": "Construction Worker"
                    }
                  }
                }
              }
            }
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    put:
      tags:
        - users
      summary: Update your user
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {
                "email": "string",
                "gender": "Female",
                "role": "string"
              }
  
      responses:
        '200':
          description: Successful response
          content:
            application/json: {
              schema: {
                type: object,
                example: {
                  "success": true,
                  "message": "Update user success",
                  "data": {
                    "user": {
                      "id": 1,
                      "email": "oainger0@craigslist.org",
                      "gender": "Female",
                      "role": "Construction Worker"
                    }
                  }
                }
              }
            }
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    delete:
      tags:
        - users
      summary: Delete your user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {
              schema: {
                type: object,
                example: {
                  "success": true,
                  "message": "Delete user success"
                }
              }
            }
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'